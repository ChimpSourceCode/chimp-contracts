{
  "contractName": "IERC721A",
  "abi": [
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of an ERC721A compliant contract.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.  Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"erc721a/contracts/IERC721A.sol\":\"IERC721A\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"erc721a/contracts/IERC721A.sol\":{\"keccak256\":\"0xe4a7c80c6e0ca1d7914c96374183df0199d9f0a85c8b6732dff93f83f65f45f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://637ed7cf3d87d35d9179e1f11c24785ce95d37ffcfb8eb9d17eab4c9289b4533\",\"dweb:/ipfs/QmXzK8mUArfEiVvSwjBG6oyQgHCGVEJVehobvVeGtDFnXa\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v3.3.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\n\n/**\n * @dev Interface of an ERC721A compliant contract.\n */\ninterface IERC721A is IERC721, IERC721Metadata {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * The caller cannot approve to their own address.\n     */\n    error ApproveToCaller();\n\n    /**\n     * The caller cannot approve to the current owner.\n     */\n    error ApprovalToCurrentOwner();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    // Compiler will pack this into a single 256bit word.\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n    }\n\n    // Compiler will pack this into a single 256bit word.\n    struct AddressData {\n        // Realistically, 2**64-1 is more than enough.\n        uint64 balance;\n        // Keeps track of mint count with minimal overhead for tokenomics.\n        uint64 numberMinted;\n        // Keeps track of burn count with minimal overhead for tokenomics.\n        uint64 numberBurned;\n        // For miscellaneous variable(s) pertaining to the address\n        // (e.g. number of whitelist mint slots used).\n        // If there are multiple variables, please pack them into a uint64.\n        uint64 aux;\n    }\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     * \n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\n     */\n    function totalSupply() external view returns (uint256);\n}\n",
  "sourcePath": "erc721a/contracts/IERC721A.sol",
  "ast": {
    "absolutePath": "erc721a/contracts/IERC721A.sol",
    "exportedSymbols": {
      "IERC165": [
        1827
      ],
      "IERC721": [
        1133
      ],
      "IERC721A": [
        3272
      ],
      "IERC721Metadata": [
        1178
      ]
    },
    "id": 3273,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3203,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "84:23:15"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "id": 3204,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3273,
        "sourceUnit": 1134,
        "src": "109:58:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "id": 3205,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3273,
        "sourceUnit": 1179,
        "src": "168:77:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3207,
              "name": "IERC721",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1133,
              "src": "329:7:15"
            },
            "id": 3208,
            "nodeType": "InheritanceSpecifier",
            "src": "329:7:15"
          },
          {
            "baseName": {
              "id": 3209,
              "name": "IERC721Metadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1178,
              "src": "338:15:15"
            },
            "id": 3210,
            "nodeType": "InheritanceSpecifier",
            "src": "338:15:15"
          }
        ],
        "canonicalName": "IERC721A",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 3206,
          "nodeType": "StructuredDocumentation",
          "src": "247:59:15",
          "text": " @dev Interface of an ERC721A compliant contract."
        },
        "fullyImplemented": false,
        "id": 3272,
        "linearizedBaseContracts": [
          3272,
          1178,
          1133,
          1827
        ],
        "name": "IERC721A",
        "nameLocation": "317:8:15",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 3211,
              "nodeType": "StructuredDocumentation",
              "src": "360:76:15",
              "text": " The caller must own the token or be an approved operator."
            },
            "errorSelector": "cfb3b942",
            "id": 3213,
            "name": "ApprovalCallerNotOwnerNorApproved",
            "nameLocation": "447:33:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3212,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "480:2:15"
            },
            "src": "441:42:15"
          },
          {
            "documentation": {
              "id": 3214,
              "nodeType": "StructuredDocumentation",
              "src": "489:44:15",
              "text": " The token does not exist."
            },
            "errorSelector": "cf4700e4",
            "id": 3216,
            "name": "ApprovalQueryForNonexistentToken",
            "nameLocation": "544:32:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3215,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "576:2:15"
            },
            "src": "538:41:15"
          },
          {
            "documentation": {
              "id": 3217,
              "nodeType": "StructuredDocumentation",
              "src": "585:66:15",
              "text": " The caller cannot approve to their own address."
            },
            "errorSelector": "b06307db",
            "id": 3219,
            "name": "ApproveToCaller",
            "nameLocation": "662:15:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3218,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "677:2:15"
            },
            "src": "656:24:15"
          },
          {
            "documentation": {
              "id": 3220,
              "nodeType": "StructuredDocumentation",
              "src": "686:66:15",
              "text": " The caller cannot approve to the current owner."
            },
            "errorSelector": "943f7b8c",
            "id": 3222,
            "name": "ApprovalToCurrentOwner",
            "nameLocation": "763:22:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3221,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "785:2:15"
            },
            "src": "757:31:15"
          },
          {
            "documentation": {
              "id": 3223,
              "nodeType": "StructuredDocumentation",
              "src": "794:65:15",
              "text": " Cannot query the balance for the zero address."
            },
            "errorSelector": "8f4eb604",
            "id": 3225,
            "name": "BalanceQueryForZeroAddress",
            "nameLocation": "870:26:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3224,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "896:2:15"
            },
            "src": "864:35:15"
          },
          {
            "documentation": {
              "id": 3226,
              "nodeType": "StructuredDocumentation",
              "src": "905:51:15",
              "text": " Cannot mint to the zero address."
            },
            "errorSelector": "2e076300",
            "id": 3228,
            "name": "MintToZeroAddress",
            "nameLocation": "967:17:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3227,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "984:2:15"
            },
            "src": "961:26:15"
          },
          {
            "documentation": {
              "id": 3229,
              "nodeType": "StructuredDocumentation",
              "src": "993:72:15",
              "text": " The quantity of tokens minted must be more than zero."
            },
            "errorSelector": "b562e8dd",
            "id": 3231,
            "name": "MintZeroQuantity",
            "nameLocation": "1076:16:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3230,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1092:2:15"
            },
            "src": "1070:25:15"
          },
          {
            "documentation": {
              "id": 3232,
              "nodeType": "StructuredDocumentation",
              "src": "1101:44:15",
              "text": " The token does not exist."
            },
            "errorSelector": "df2d9b42",
            "id": 3234,
            "name": "OwnerQueryForNonexistentToken",
            "nameLocation": "1156:29:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3233,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1185:2:15"
            },
            "src": "1150:38:15"
          },
          {
            "documentation": {
              "id": 3235,
              "nodeType": "StructuredDocumentation",
              "src": "1194:76:15",
              "text": " The caller must own the token or be an approved operator."
            },
            "errorSelector": "59c896be",
            "id": 3237,
            "name": "TransferCallerNotOwnerNorApproved",
            "nameLocation": "1281:33:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3236,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1314:2:15"
            },
            "src": "1275:42:15"
          },
          {
            "documentation": {
              "id": 3238,
              "nodeType": "StructuredDocumentation",
              "src": "1323:53:15",
              "text": " The token must be owned by `from`."
            },
            "errorSelector": "a1148100",
            "id": 3240,
            "name": "TransferFromIncorrectOwner",
            "nameLocation": "1387:26:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3239,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1413:2:15"
            },
            "src": "1381:35:15"
          },
          {
            "documentation": {
              "id": 3241,
              "nodeType": "StructuredDocumentation",
              "src": "1422:109:15",
              "text": " Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
            },
            "errorSelector": "d1a57ed6",
            "id": 3243,
            "name": "TransferToNonERC721ReceiverImplementer",
            "nameLocation": "1542:38:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3242,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1580:2:15"
            },
            "src": "1536:47:15"
          },
          {
            "documentation": {
              "id": 3244,
              "nodeType": "StructuredDocumentation",
              "src": "1589:55:15",
              "text": " Cannot transfer to the zero address."
            },
            "errorSelector": "ea553b34",
            "id": 3246,
            "name": "TransferToZeroAddress",
            "nameLocation": "1655:21:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3245,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1676:2:15"
            },
            "src": "1649:30:15"
          },
          {
            "documentation": {
              "id": 3247,
              "nodeType": "StructuredDocumentation",
              "src": "1685:44:15",
              "text": " The token does not exist."
            },
            "errorSelector": "a14c4b50",
            "id": 3249,
            "name": "URIQueryForNonexistentToken",
            "nameLocation": "1740:27:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3248,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1767:2:15"
            },
            "src": "1734:36:15"
          },
          {
            "canonicalName": "IERC721A.TokenOwnership",
            "id": 3256,
            "members": [
              {
                "constant": false,
                "id": 3251,
                "mutability": "mutable",
                "name": "addr",
                "nameLocation": "1911:4:15",
                "nodeType": "VariableDeclaration",
                "scope": 3256,
                "src": "1903:12:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 3250,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1903:7:15",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3253,
                "mutability": "mutable",
                "name": "startTimestamp",
                "nameLocation": "2024:14:15",
                "nodeType": "VariableDeclaration",
                "scope": 3256,
                "src": "2017:21:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 3252,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2017:6:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3255,
                "mutability": "mutable",
                "name": "burned",
                "nameLocation": "2099:6:15",
                "nodeType": "VariableDeclaration",
                "scope": 3256,
                "src": "2094:11:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 3254,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "2094:4:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "TokenOwnership",
            "nameLocation": "1841:14:15",
            "nodeType": "StructDefinition",
            "scope": 3272,
            "src": "1834:278:15",
            "visibility": "public"
          },
          {
            "canonicalName": "IERC721A.AddressData",
            "id": 3265,
            "members": [
              {
                "constant": false,
                "id": 3258,
                "mutability": "mutable",
                "name": "balance",
                "nameLocation": "2267:7:15",
                "nodeType": "VariableDeclaration",
                "scope": 3265,
                "src": "2260:14:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 3257,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2260:6:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3260,
                "mutability": "mutable",
                "name": "numberMinted",
                "nameLocation": "2366:12:15",
                "nodeType": "VariableDeclaration",
                "scope": 3265,
                "src": "2359:19:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 3259,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2359:6:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3262,
                "mutability": "mutable",
                "name": "numberBurned",
                "nameLocation": "2470:12:15",
                "nodeType": "VariableDeclaration",
                "scope": 3265,
                "src": "2463:19:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 3261,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2463:6:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3264,
                "mutability": "mutable",
                "name": "aux",
                "nameLocation": "2697:3:15",
                "nodeType": "VariableDeclaration",
                "scope": 3265,
                "src": "2690:10:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 3263,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2690:6:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "AddressData",
            "nameLocation": "2183:11:15",
            "nodeType": "StructDefinition",
            "scope": 3272,
            "src": "2176:531:15",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 3266,
              "nodeType": "StructuredDocumentation",
              "src": "2713:194:15",
              "text": " @dev Returns the total amount of tokens stored by the contract.\n \n Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens."
            },
            "functionSelector": "18160ddd",
            "id": 3271,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nameLocation": "2921:11:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3267,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2932:2:15"
            },
            "returnParameters": {
              "id": 3270,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3269,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3271,
                  "src": "2958:7:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3268,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2958:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2957:9:15"
            },
            "scope": 3272,
            "src": "2912:55:15",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 3273,
        "src": "307:2662:15",
        "usedErrors": [
          3213,
          3216,
          3219,
          3222,
          3225,
          3228,
          3231,
          3234,
          3237,
          3240,
          3243,
          3246,
          3249
        ]
      }
    ],
    "src": "84:2886:15"
  },
  "legacyAST": {
    "absolutePath": "erc721a/contracts/IERC721A.sol",
    "exportedSymbols": {
      "IERC165": [
        1827
      ],
      "IERC721": [
        1133
      ],
      "IERC721A": [
        3272
      ],
      "IERC721Metadata": [
        1178
      ]
    },
    "id": 3273,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3203,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "84:23:15"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "id": 3204,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3273,
        "sourceUnit": 1134,
        "src": "109:58:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "id": 3205,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3273,
        "sourceUnit": 1179,
        "src": "168:77:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3207,
              "name": "IERC721",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1133,
              "src": "329:7:15"
            },
            "id": 3208,
            "nodeType": "InheritanceSpecifier",
            "src": "329:7:15"
          },
          {
            "baseName": {
              "id": 3209,
              "name": "IERC721Metadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1178,
              "src": "338:15:15"
            },
            "id": 3210,
            "nodeType": "InheritanceSpecifier",
            "src": "338:15:15"
          }
        ],
        "canonicalName": "IERC721A",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 3206,
          "nodeType": "StructuredDocumentation",
          "src": "247:59:15",
          "text": " @dev Interface of an ERC721A compliant contract."
        },
        "fullyImplemented": false,
        "id": 3272,
        "linearizedBaseContracts": [
          3272,
          1178,
          1133,
          1827
        ],
        "name": "IERC721A",
        "nameLocation": "317:8:15",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 3211,
              "nodeType": "StructuredDocumentation",
              "src": "360:76:15",
              "text": " The caller must own the token or be an approved operator."
            },
            "errorSelector": "cfb3b942",
            "id": 3213,
            "name": "ApprovalCallerNotOwnerNorApproved",
            "nameLocation": "447:33:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3212,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "480:2:15"
            },
            "src": "441:42:15"
          },
          {
            "documentation": {
              "id": 3214,
              "nodeType": "StructuredDocumentation",
              "src": "489:44:15",
              "text": " The token does not exist."
            },
            "errorSelector": "cf4700e4",
            "id": 3216,
            "name": "ApprovalQueryForNonexistentToken",
            "nameLocation": "544:32:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3215,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "576:2:15"
            },
            "src": "538:41:15"
          },
          {
            "documentation": {
              "id": 3217,
              "nodeType": "StructuredDocumentation",
              "src": "585:66:15",
              "text": " The caller cannot approve to their own address."
            },
            "errorSelector": "b06307db",
            "id": 3219,
            "name": "ApproveToCaller",
            "nameLocation": "662:15:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3218,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "677:2:15"
            },
            "src": "656:24:15"
          },
          {
            "documentation": {
              "id": 3220,
              "nodeType": "StructuredDocumentation",
              "src": "686:66:15",
              "text": " The caller cannot approve to the current owner."
            },
            "errorSelector": "943f7b8c",
            "id": 3222,
            "name": "ApprovalToCurrentOwner",
            "nameLocation": "763:22:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3221,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "785:2:15"
            },
            "src": "757:31:15"
          },
          {
            "documentation": {
              "id": 3223,
              "nodeType": "StructuredDocumentation",
              "src": "794:65:15",
              "text": " Cannot query the balance for the zero address."
            },
            "errorSelector": "8f4eb604",
            "id": 3225,
            "name": "BalanceQueryForZeroAddress",
            "nameLocation": "870:26:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3224,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "896:2:15"
            },
            "src": "864:35:15"
          },
          {
            "documentation": {
              "id": 3226,
              "nodeType": "StructuredDocumentation",
              "src": "905:51:15",
              "text": " Cannot mint to the zero address."
            },
            "errorSelector": "2e076300",
            "id": 3228,
            "name": "MintToZeroAddress",
            "nameLocation": "967:17:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3227,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "984:2:15"
            },
            "src": "961:26:15"
          },
          {
            "documentation": {
              "id": 3229,
              "nodeType": "StructuredDocumentation",
              "src": "993:72:15",
              "text": " The quantity of tokens minted must be more than zero."
            },
            "errorSelector": "b562e8dd",
            "id": 3231,
            "name": "MintZeroQuantity",
            "nameLocation": "1076:16:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3230,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1092:2:15"
            },
            "src": "1070:25:15"
          },
          {
            "documentation": {
              "id": 3232,
              "nodeType": "StructuredDocumentation",
              "src": "1101:44:15",
              "text": " The token does not exist."
            },
            "errorSelector": "df2d9b42",
            "id": 3234,
            "name": "OwnerQueryForNonexistentToken",
            "nameLocation": "1156:29:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3233,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1185:2:15"
            },
            "src": "1150:38:15"
          },
          {
            "documentation": {
              "id": 3235,
              "nodeType": "StructuredDocumentation",
              "src": "1194:76:15",
              "text": " The caller must own the token or be an approved operator."
            },
            "errorSelector": "59c896be",
            "id": 3237,
            "name": "TransferCallerNotOwnerNorApproved",
            "nameLocation": "1281:33:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3236,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1314:2:15"
            },
            "src": "1275:42:15"
          },
          {
            "documentation": {
              "id": 3238,
              "nodeType": "StructuredDocumentation",
              "src": "1323:53:15",
              "text": " The token must be owned by `from`."
            },
            "errorSelector": "a1148100",
            "id": 3240,
            "name": "TransferFromIncorrectOwner",
            "nameLocation": "1387:26:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3239,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1413:2:15"
            },
            "src": "1381:35:15"
          },
          {
            "documentation": {
              "id": 3241,
              "nodeType": "StructuredDocumentation",
              "src": "1422:109:15",
              "text": " Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
            },
            "errorSelector": "d1a57ed6",
            "id": 3243,
            "name": "TransferToNonERC721ReceiverImplementer",
            "nameLocation": "1542:38:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3242,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1580:2:15"
            },
            "src": "1536:47:15"
          },
          {
            "documentation": {
              "id": 3244,
              "nodeType": "StructuredDocumentation",
              "src": "1589:55:15",
              "text": " Cannot transfer to the zero address."
            },
            "errorSelector": "ea553b34",
            "id": 3246,
            "name": "TransferToZeroAddress",
            "nameLocation": "1655:21:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3245,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1676:2:15"
            },
            "src": "1649:30:15"
          },
          {
            "documentation": {
              "id": 3247,
              "nodeType": "StructuredDocumentation",
              "src": "1685:44:15",
              "text": " The token does not exist."
            },
            "errorSelector": "a14c4b50",
            "id": 3249,
            "name": "URIQueryForNonexistentToken",
            "nameLocation": "1740:27:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3248,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1767:2:15"
            },
            "src": "1734:36:15"
          },
          {
            "canonicalName": "IERC721A.TokenOwnership",
            "id": 3256,
            "members": [
              {
                "constant": false,
                "id": 3251,
                "mutability": "mutable",
                "name": "addr",
                "nameLocation": "1911:4:15",
                "nodeType": "VariableDeclaration",
                "scope": 3256,
                "src": "1903:12:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 3250,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1903:7:15",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3253,
                "mutability": "mutable",
                "name": "startTimestamp",
                "nameLocation": "2024:14:15",
                "nodeType": "VariableDeclaration",
                "scope": 3256,
                "src": "2017:21:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 3252,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2017:6:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3255,
                "mutability": "mutable",
                "name": "burned",
                "nameLocation": "2099:6:15",
                "nodeType": "VariableDeclaration",
                "scope": 3256,
                "src": "2094:11:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 3254,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "2094:4:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "TokenOwnership",
            "nameLocation": "1841:14:15",
            "nodeType": "StructDefinition",
            "scope": 3272,
            "src": "1834:278:15",
            "visibility": "public"
          },
          {
            "canonicalName": "IERC721A.AddressData",
            "id": 3265,
            "members": [
              {
                "constant": false,
                "id": 3258,
                "mutability": "mutable",
                "name": "balance",
                "nameLocation": "2267:7:15",
                "nodeType": "VariableDeclaration",
                "scope": 3265,
                "src": "2260:14:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 3257,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2260:6:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3260,
                "mutability": "mutable",
                "name": "numberMinted",
                "nameLocation": "2366:12:15",
                "nodeType": "VariableDeclaration",
                "scope": 3265,
                "src": "2359:19:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 3259,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2359:6:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3262,
                "mutability": "mutable",
                "name": "numberBurned",
                "nameLocation": "2470:12:15",
                "nodeType": "VariableDeclaration",
                "scope": 3265,
                "src": "2463:19:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 3261,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2463:6:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3264,
                "mutability": "mutable",
                "name": "aux",
                "nameLocation": "2697:3:15",
                "nodeType": "VariableDeclaration",
                "scope": 3265,
                "src": "2690:10:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 3263,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2690:6:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "AddressData",
            "nameLocation": "2183:11:15",
            "nodeType": "StructDefinition",
            "scope": 3272,
            "src": "2176:531:15",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 3266,
              "nodeType": "StructuredDocumentation",
              "src": "2713:194:15",
              "text": " @dev Returns the total amount of tokens stored by the contract.\n \n Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens."
            },
            "functionSelector": "18160ddd",
            "id": 3271,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nameLocation": "2921:11:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3267,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2932:2:15"
            },
            "returnParameters": {
              "id": 3270,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3269,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3271,
                  "src": "2958:7:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3268,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2958:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2957:9:15"
            },
            "scope": 3272,
            "src": "2912:55:15",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 3273,
        "src": "307:2662:15",
        "usedErrors": [
          3213,
          3216,
          3219,
          3222,
          3225,
          3228,
          3231,
          3234,
          3237,
          3240,
          3243,
          3246,
          3249
        ]
      }
    ],
    "src": "84:2886:15"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.13+commit.abaa5c0e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.6",
  "updatedAt": "2022-08-18T20:23:20.132Z",
  "devdoc": {
    "details": "Interface of an ERC721A compliant contract.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in ``owner``'s account."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "totalSupply()": {
        "details": "Returns the total amount of tokens stored by the contract.  Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "ApprovalToCurrentOwner()": [
        {
          "notice": "The caller cannot approve to the current owner."
        }
      ],
      "ApproveToCaller()": [
        {
          "notice": "The caller cannot approve to their own address."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  }
}